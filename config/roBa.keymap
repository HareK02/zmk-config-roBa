#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <3>;
    scroll-layers = <4>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        DEFAULT {
            bindings = <
&kp APOS       &kp COMMA  &kp DOT   &kp P           &kp Y                                                      &kp F      &kp G  &kp C  &kp R  &kp L
&kp A          &kp O      &kp E     &kp U           &kp I        &kp K_PLAY_PAUSE      &mt NUMBER_3 LA(GRAVE)  &kp D      &kp H  &kp T  &kp N  &kp S
&kp SEMICOLON  &kp Q      &kp J     &kp K           &kp X        &kp MINUS             &mt A ESCAPE            &kp B      &kp M  &kp W  &kp V  &kp Z
&kp LCTRL      &kp LGUI   &kp LALT  &kp LEFT_SHIFT  &lt 1 SPACE  &lt 2 LA(GRAVE)       &kp BACKSPACE           &kp ENTER                       &kp DEL
            >;

            sensor-bindings = <&inc_dec_kp LEFT_BRACKET RIGHT_BRACKET>;
        };

        EDIT {
            bindings = <
&to 5         &trans              &kp UP_ARROW    &trans               &kp PAGE_UP                                    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp SLASH      &kp BACKSLASH  &kp RIGHT_PARENTHESIS
&to 6         &kp LEFT_ARROW      &kp DOWN_ARROW  &kp RIGHT_ARROW      &kp PAGE_DOWN  &trans         &kp PRINTSCREEN  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp HASH       &kp DOLLAR     &kp PERCENT
&kp LEFT_GUI  &kp LC(LEFT_ARROW)  &trans          &kp LC(RIGHT_ARROW)  &kp INSERT     &kp EQUAL      &trans           &kp COMMA             &kp PERIOD             &kp SEMICOLON  &kp SQT        &trans
&trans        &trans              &trans          &trans               &trans         &trans         &trans           &trans                                                                     &kp PIPE
            >;
        };

        NUM {
            bindings = <
&trans     &trans          &kp UP_ARROW    &trans           &kp HOME                      &trans           &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &trans
&trans     &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp END   &trans      &trans  &trans           &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &trans
&kp LC(Z)  &kp LC(X)       &kp LC(C)       &kp LC(V)        &trans    &trans      &trans  &kp KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &trans
&trans     &trans          &trans          &trans           &trans    &trans      &trans  &trans                                                              &trans
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &mo 4     &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        FUNCTION {
            bindings = <
&trans  &trans  &trans  &trans  &trans                       &trans  &kp F7  &kp F8  &kp F9  &kp F10
&trans  &trans  &trans  &trans  &trans  &trans      &kp F13  &trans  &kp F4  &kp F5  &kp F6  &kp F11
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans  &kp F1  &kp F2  &kp F3  &kp F12
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans                          &trans
            >;
        };

        DEVICE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans  &trans  &trans  &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans  &trans  &trans  &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
