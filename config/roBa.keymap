#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <input/processors.dtsi>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&mkp_input_listener {
    input-processors = <&zip_temp_layer 5 10000>;
};

/ {
    /omit-if-no-ref/ zip_temp_layer: zip_temp_layer {
        compatible = "zmk,input-processor-temp-layer";
        #input-processor-cells = <2>;
        require-prior-idle-ms = <500>;   // ← 非マウスキー後2秒はAMLを起動しない
    };
};

&trackball_listener {
    input-processors = <
        &zip_temp_layer 1 500
        &zip_xy_scaler 1 3
    >;

    scroller {
        layers = <2>;
        input-processors = <
            &zip_xy_to_scroll_mapper
            &zip_scroll_scaler 1 3
        >;
    };

    snipe {
        layers = <3>;
        input-processors = <&zip_xy_scaler 1 6>;
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <12 13>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        DEFAULT {
            bindings = <
&kp APOS       &kp COMMA  &kp DOT   &kp P           &kp Y                                                 &kp F      &kp G  &kp C  &kp R  &kp L
&kp A          &kp O      &kp E     &kp U           &kp I        &kp K_PLAY_PAUSE      &kp INT_HENKAN     &kp D      &kp H  &kp T  &kp N  &kp S
&kp SEMICOLON  &kp Q      &kp J     &kp K           &kp X        &kp MINUS             &kp DOUBLE_QUOTES  &kp B      &kp M  &kp W  &kp V  &kp Z
&kp LCTRL      &kp LGUI   &kp LALT  &kp LEFT_SHIFT  &lt 3 SPACE  &lt 5 LA(GRAVE)       &kp BACKSPACE      &kp ENTER                       &kp DEL
            >;

            sensor-bindings = <&inc_dec_kp LEFT_BRACKET RIGHT_BRACKET>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &mo 2     &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        EDIT {
            bindings = <
&mo 6               &trans            &kp UP_ARROW    &trans             &kp PAGE_UP                                     &kp CARET     &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LEFT_BRACKET  &kp RIGHT_BRACKET
&kp LEFT_GUI        &kp LEFT_ARROW    &kp DOWN_ARROW  &kp RIGHT_ARROW    &kp PAGE_DOWN  &trans         &kp PRINTSCREEN   &kp SLASH     &kp AT_SIGN           &kp HASH               &kp DOLLAR        &kp PERCENT
&kp LG(LEFT_SHIFT)  &kp LC(LG(LEFT))  &trans          &kp LC(LG(RIGHT))  &kp INSERT     &kp EQUAL      &kp SINGLE_QUOTE  &kp QUESTION  &kp SEMICOLON         &kp ASTERISK           &kp GRAVE         &kp AMPERSAND
&mo 7               &trans            &trans          &trans             &trans         &trans         &trans            &mo 4                                                                        &trans
            >;
        };

        EDIT_BACK {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans           &trans     &trans  &kp LEFT_BRACE  &kp RIGHT_BRACE
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &kp BACKSLASH    &trans     &trans  &trans          &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &kp EXCLAMATION  &kp COLON  &trans  &kp TILDE       &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                              &trans
            >;
        };

        NUM {
            bindings = <
&trans     &trans          &kp UP_ARROW    &trans           &kp HOME                      &kp CAPSLOCK     &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &trans
&kp LC(A)  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp END   &trans      &trans  &kp KP_NUMLOCK   &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp LC(S)
&kp LC(Z)  &kp LC(X)       &kp LC(C)       &kp LC(V)        &trans    &trans      &trans  &kp KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &trans
&trans     &trans          &trans          &trans           &trans    &trans      &trans  &trans                                                              &trans
            >;
        };

        FUNCTION {
            bindings = <
&trans  &trans  &trans  &trans  &trans                       &trans  &kp F7  &kp F8  &kp F9  &kp F10
&trans  &trans  &trans  &trans  &trans  &trans      &kp F13  &trans  &kp F4  &kp F5  &kp F6  &kp F11
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans  &kp F1  &kp F2  &kp F3  &kp F12
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans                          &trans
            >;
        };

        DEVICE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                 &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans  &trans  &trans  &trans  &trans           &out OUT_USB  &trans        &trans        &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans  &bootloader      &out OUT_BLE  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans  &trans  &trans  &trans  &trans           &trans        &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
